{"version":3,"file":"static/js/23.63ce04d2.chunk.js","mappings":"6PAIe,SAASA,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA+BT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAvCE,EAAOD,EAAA,GAAEE,EAAWF,EAAA,GAqB3B,OAnBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACG,OAAnBf,GAAa,GAAMa,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEMC,EAAAA,EAAAA,IAAU,sCAADC,OACQ5B,EAAO,sDAC7C,KAAD,EAAAsB,EAAAE,EAAAK,KAFON,EAAID,EAAJC,KAGRO,QAAQC,IAAIR,EAAKS,SACjBzB,EAAegB,EAAKS,SAASR,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAE7BM,QAAQC,IAAGP,EAAAS,GAAQ,SACnBlB,GAAY,GAAM,QAEE,OAFFS,EAAAC,KAAA,GAElBd,GAAa,GAAOa,EAAAU,OAAA,6BAAAV,EAAAW,OAAA,GAAAd,EAAA,yBAEvB,kBAdc,OAAAH,EAAAkB,MAAA,KAAAC,UAAA,KAefpB,GACF,GAAG,CAACjB,KAGFsC,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACGzB,IAAWwB,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4BACd7B,IAAa4B,EAAAA,EAAAA,KAAA,KAAAC,SAAG,gBAChBjC,EAAYmC,OAAS,EACpBnC,EAAYoC,KAAI,SAAAC,GAAM,OACpBH,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,KAAAC,SAAII,EAAOC,WACXN,EAAAA,EAAAA,KAAA,KAAAC,SAAII,EAAOE,WAFJF,EAAOG,GAGX,KAGPR,EAAAA,EAAAA,KAAA,KAAAC,SAAG,mDAKb,C","sources":["components/reviews/Reviews.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [movieReviev, setMovieReviev] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsErrror] = useState(false);\n\n  useEffect(() => {\n    const getReview = async () => {\n      setIsLoading(true);\n      try {\n        const { data } = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=6f0a7e90748cec36ca14cbe73d2c8153`\n        );\n        console.log(data.results);\n        setMovieReviev(data.results);\n      } catch (error) {\n        console.log(error, 'Error');\n        setIsErrror(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getReview();\n  }, [movieId]);\n\n  return (\n    <div>\n      <ul>\n        {isError && <p>Something went wrong...</p>}\n        {isLoading && <p>Loading ...</p>}\n        {movieReviev.length > 0 ? (\n          movieReviev.map(review => (\n            <li key={review.id}>\n              <p>{review.content}</p>\n              <p>{review.author}</p>\n            </li>\n          ))\n        ) : (\n          <p> We don't have any reviewes for this movie</p>\n        )}\n      </ul>\n    </div>\n  );\n}\n"],"names":["Reviews","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieReviev","setMovieReviev","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isError","setIsErrror","useEffect","getReview","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","axios","concat","sent","console","log","results","t0","finish","stop","apply","arguments","_jsx","children","_jsxs","length","map","review","content","author","id"],"sourceRoot":""}